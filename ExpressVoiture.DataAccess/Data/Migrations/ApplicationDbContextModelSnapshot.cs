// <auto-generated />
using System;
using ExpressVoiture.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpressVoiture.Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpressVoiture.Domain.Models.Reparation", b =>
                {
                    b.Property<int>("ReparationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReparationId"));

                    b.Property<double>("Cout")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoitureId")
                        .HasColumnType("int");

                    b.HasKey("ReparationId");

                    b.HasIndex("VoitureId")
                        .IsUnique();

                    b.ToTable("Reparation");

                    b.HasData(
                        new
                        {
                            ReparationId = 1,
                            Cout = 7600.0,
                            Description = "Restauration complète",
                            VoitureId = 1
                        },
                        new
                        {
                            ReparationId = 2,
                            Cout = 350.0,
                            Description = "Roulements des roues avant",
                            VoitureId = 2
                        },
                        new
                        {
                            ReparationId = 3,
                            Cout = 690.0,
                            Description = "Radiateur, freins",
                            VoitureId = 3
                        },
                        new
                        {
                            ReparationId = 4,
                            Cout = 1100.0,
                            Description = "Pneus, freins",
                            VoitureId = 4
                        },
                        new
                        {
                            ReparationId = 5,
                            Cout = 475.0,
                            Description = "Climatisation, freins",
                            VoitureId = 5
                        },
                        new
                        {
                            ReparationId = 6,
                            Cout = 440.0,
                            Description = "Pneus",
                            VoitureId = 6
                        },
                        new
                        {
                            ReparationId = 7,
                            Cout = 950.0,
                            Description = "Pneus, freins, climatisation",
                            VoitureId = 7
                        });
                });

            modelBuilder.Entity("ExpressVoiture.Domain.Models.Vente", b =>
                {
                    b.Property<int>("VenteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenteId"));

                    b.Property<DateTime>("DateDisponibiliteVente")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateVente")
                        .HasColumnType("datetime2");

                    b.Property<double>("PrixVente")
                        .HasColumnType("float");

                    b.Property<int>("VoitureId")
                        .HasColumnType("int");

                    b.HasKey("VenteId");

                    b.HasIndex("VoitureId")
                        .IsUnique();

                    b.ToTable("Vente");

                    b.HasData(
                        new
                        {
                            VenteId = 1,
                            DateDisponibiliteVente = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateVente = new DateTime(2022, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrixVente = 7600.0,
                            VoitureId = 1
                        },
                        new
                        {
                            VenteId = 2,
                            DateDisponibiliteVente = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateVente = new DateTime(2022, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrixVente = 5350.0,
                            VoitureId = 2
                        },
                        new
                        {
                            VenteId = 3,
                            DateDisponibiliteVente = new DateTime(2022, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrixVente = 2990.0,
                            VoitureId = 3
                        },
                        new
                        {
                            VenteId = 4,
                            DateDisponibiliteVente = new DateTime(2022, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrixVente = 25950.0,
                            VoitureId = 4
                        },
                        new
                        {
                            VenteId = 5,
                            DateDisponibiliteVente = new DateTime(2022, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrixVente = 4975.0,
                            VoitureId = 5
                        },
                        new
                        {
                            VenteId = 6,
                            DateDisponibiliteVente = new DateTime(2022, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateVente = new DateTime(2022, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrixVente = 16190.0,
                            VoitureId = 6
                        },
                        new
                        {
                            VenteId = 7,
                            DateDisponibiliteVente = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateVente = new DateTime(2022, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PrixVente = 12440.0,
                            VoitureId = 7
                        });
                });

            modelBuilder.Entity("ExpressVoiture.Domain.Models.VoitureAVendre", b =>
                {
                    b.Property<int>("VoitureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoitureId"));

                    b.Property<int>("Annee")
                        .HasColumnType("int");

                    b.Property<string>("CodeVIN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAchat")
                        .HasColumnType("datetime2");

                    b.Property<string>("Finition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modele")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PrixAchat")
                        .HasColumnType("float");

                    b.HasKey("VoitureId");

                    b.ToTable("Voitures");

                    b.HasData(
                        new
                        {
                            VoitureId = 1,
                            Annee = 2019,
                            DateAchat = new DateTime(2022, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finition = "LE",
                            ImagePath = "images\\vehicles\\d950d976-c3db-4e9a-a465-6422ef06f949.jpg",
                            Marque = "Mazda",
                            Modele = "Miata",
                            PrixAchat = 1800.0
                        },
                        new
                        {
                            VoitureId = 2,
                            Annee = 2007,
                            DateAchat = new DateTime(2022, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finition = "Sport",
                            ImagePath = "images\\vehicles\\ba52fc34-a4eb-446f-aa19-078a26829f29.jpg",
                            Marque = "Jeep",
                            Modele = "Liberty",
                            PrixAchat = 4500.0
                        },
                        new
                        {
                            VoitureId = 3,
                            Annee = 2007,
                            DateAchat = new DateTime(2022, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finition = "TCe",
                            ImagePath = "images\\vehicles\\41597198-aaea-461b-af70-c9b4505e9298.jpg",
                            Marque = "Renault",
                            Modele = "Scénic",
                            PrixAchat = 1800.0
                        },
                        new
                        {
                            VoitureId = 4,
                            Annee = 2017,
                            DateAchat = new DateTime(2022, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finition = "XLT",
                            ImagePath = "images\\vehicles\\fa6b80a2-f4f9-44da-bf16-6e8bd5e2d1a0.jpg",
                            Marque = "Ford",
                            Modele = "Explorer",
                            PrixAchat = 24350.0
                        },
                        new
                        {
                            VoitureId = 5,
                            Annee = 2008,
                            DateAchat = new DateTime(2022, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finition = "LX",
                            ImagePath = "images\\vehicles\\633fd8d9-4550-4269-a508-5a08e1fa564b.jpg",
                            Marque = "Honda",
                            Modele = "Civic",
                            PrixAchat = 4000.0
                        },
                        new
                        {
                            VoitureId = 6,
                            Annee = 2016,
                            DateAchat = new DateTime(2022, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finition = "S",
                            ImagePath = "images\\vehicles\\f0c751ce-6cf0-4fcf-9ac8-1f125269dec3.jpg",
                            Marque = "Volkswagen",
                            Modele = "GTI",
                            PrixAchat = 15250.0
                        },
                        new
                        {
                            VoitureId = 7,
                            Annee = 2013,
                            DateAchat = new DateTime(2022, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Finition = "SEL",
                            ImagePath = "images\\vehicles\\c93a06dd-2e25-4776-91f4-d999779cad87.jpg",
                            Marque = "Ford",
                            Modele = "Edge",
                            PrixAchat = 10990.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExpressVoiture.Domain.Models.Reparation", b =>
                {
                    b.HasOne("ExpressVoiture.Domain.Models.VoitureAVendre", "Voiture")
                        .WithOne("Reparation")
                        .HasForeignKey("ExpressVoiture.Domain.Models.Reparation", "VoitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voiture");
                });

            modelBuilder.Entity("ExpressVoiture.Domain.Models.Vente", b =>
                {
                    b.HasOne("ExpressVoiture.Domain.Models.VoitureAVendre", "Voiture")
                        .WithOne("Vente")
                        .HasForeignKey("ExpressVoiture.Domain.Models.Vente", "VoitureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voiture");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpressVoiture.Domain.Models.VoitureAVendre", b =>
                {
                    b.Navigation("Reparation");

                    b.Navigation("Vente");
                });
#pragma warning restore 612, 618
        }
    }
}
